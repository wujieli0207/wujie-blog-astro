---
import { type CollectionEntry, getCollection } from 'astro:content';
import BaseLayout from '../../layouts/BaseLayout.astro';
import Button from '../../components/Button.astro';
import FormattedDate from '../../components/FormattedDate.astro';
import PostPreview from '../../components/PostPreview.astro';
import Subscribe from '../../components/Subscribe.astro';
import { sortItemsByDateDesc } from '../../utils/data-utils';
import { slugify } from '../../utils/common-utils';
import { TAG_MAP } from '../../data/common';

export async function getStaticPaths() {
    const posts = (await getCollection('blog')).sort(sortItemsByDateDesc);
    const postCount = posts.length;
    return posts.map((post, index) => ({
        params: { slug: post.slug },
        props: {
            post,
            prevPost: index + 1 !== postCount ? posts[index + 1] : null,
            nextPost: index !== 0 ? posts[index - 1] : null
        }
    }));
}

type Props = { post: CollectionEntry<'blog'>; prevPost: CollectionEntry<'blog'>; nextPost: CollectionEntry<'blog'> };

const { href } = Astro.url;
const { post, prevPost, nextPost } = Astro.props;
const { title, publishDate, updatedDate, excerpt, tags = [], seo } = post.data;
const { Content, headings, remarkPluginFrontmatter } = await post.render();
const { minutesRead } = remarkPluginFrontmatter
---

<BaseLayout title={seo?.title ?? title} description={seo?.description ?? excerpt} image={seo?.image} pageType="article" showHeader={false}>
    <article class="mb-16 sm:mb-24">
        <header class="mb-8">
            <h1 class="text-3xl leading-tight font-serif font-medium sm:text-5xl sm:leading-tight">{title}</h1>
            <div class="mt-4 text-sm flex justify-between">
                <FormattedDate date={publishDate} />
                {
                    updatedDate && (
                        <>
                            {' '}
                            <span>
                                (Updated on <FormattedDate date={updatedDate} />)
                            </span>
                        </>
                    )
                }
                <span>{minutesRead}</span>
            </div>
        </header>
        <div id="content" class="max-w-none prose prose-dante text-justify sm:prose-lg">
            <Content />
        </div>
        <div class="mt-8 flex flex-wrap items-center gap-6 text-sm justify-between sm:mt-12 sm:text-base">
            {
                tags.length > 0 && (
                    <div class="flex flex-wrap gap-x-5 gap-y-1 text-sm">
                        {tags.map((tag) => (
                            <a class="text-main hover:underline" href={`/tags/${slugify(tag)}`}>
                                #{TAG_MAP[tag]}
                            </a>
                        ))}
                    </div>
                )
            }
            <Button class="copy-url-button" aria-label="Copy link" data-url={href} data-tooltip-default="Copy link" data-tooltip-success="Copied">Share</Button>
        </div>
    </article>
    {
        (prevPost || nextPost) && (
            <div class="my-16 sm:my-24">
                <h2 class="mb-12 text-xl font-serif italic sm:mb-16 sm:text-2xl">继续阅读</h2>
                {nextPost && <PostPreview post={nextPost} class="mb-10 sm:mb-12" headingLevel="h3" />}
                {prevPost && <PostPreview post={prevPost} class="mb-10 sm:mb-12" headingLevel="h3" />}
            </div>
        )
    }
    <Subscribe class="my-16 sm:my-24" />
</BaseLayout>

<script>
    document.addEventListener('astro:page-load', () => {
        const copyUrlButton = document.querySelector('.copy-url-button') as HTMLButtonElement;
        copyUrlButton?.addEventListener('click', async () => {
            await copyUrl(copyUrlButton);
        });

        async function copyUrl(button: HTMLButtonElement) {
            let url = button.getAttribute('data-url') || '';
            let label = button.innerText;

            await navigator.clipboard.writeText(url);

            button.innerText = 'Copied';

            setTimeout(() => {
                button.innerText = label;
            }, 2500);
        }

         /** Create a progress indicator
         *  at the top */
        function createProgressBar() {
            // Create the main container div
            const progressContainer = document.createElement("div");
            progressContainer.className =
            "progress-container fixed top-0 z-100 h-1 w-full bg-skin-fill";

            // Create the progress bar div
            const progressBar = document.createElement("div");
            progressBar.className = "progress-bar h-[2px] w-0 bg-skin-accent bg-blue-600 dark:bg-blue-800";
            progressBar.id = "myBar";

            // Append the progress bar to the progress container
            progressContainer.appendChild(progressBar);
            console.log('progressBar: ', progressBar);

            // Append the progress container to the document body or any other desired parent element
            document.body.appendChild(progressContainer);
            console.log('progressContainer: ', progressContainer);
        }
        createProgressBar();

        /** Update the progress bar
         *  when user scrolls */
        function updateScrollProgress() {
            const winScroll =
            document.body.scrollTop || document.documentElement.scrollTop;
            const height =
            document.documentElement.scrollHeight -
            document.documentElement.clientHeight;
            const scrolled = (winScroll / height) * 100;
            if (document) {
            const myBar = document.getElementById("myBar");
            if (myBar) {
                myBar.style.width = scrolled + "%";
            }
            }
        }
        document.addEventListener("scroll", updateScrollProgress);

        /** Attaches links to headings in the document,
         *  allowing sharing of sections easily */
        function addHeadingLinks() {
            let headings = Array.from(document.querySelectorAll("#content > h2, #content > h3, #content > h4, #content > h5, #content > h6"));
            for (let heading of headings) {
            heading.classList.add("group");
            let link = document.createElement("a");
            link.innerText = "#";
            link.className = "heading-link hidden group-hover:inline-block ml-2";
            link.href = "#" + heading.id;
            link.ariaHidden = "true";
            heading.appendChild(link);
            }
        }
        addHeadingLinks();
    });

   
</script>
